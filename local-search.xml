<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go中的包管理方式</title>
    <link href="/2023/09/01/Go%E4%B8%AD%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/"/>
    <url>/2023/09/01/Go%E4%B8%AD%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="Go-Modules"><a href="#Go-Modules" class="headerlink" title="Go Modules"></a>Go Modules</h2><p>本质上, 一个Go包就是一个项目的原码<br>gomod的作用: 将Go包和Git项目关联起来<br>Go包的版本就是git项目的Tag<br>gomod就是解决”需要哪个git项目的什么版本”</p><h2 id="使用Modules"><a href="#使用Modules" class="headerlink" title="使用Modules"></a>使用Modules</h2><ul><li>github.com&#x2F;Jeffail&#x2F;tunny<br><code>go get github.com/Jeffail/tunny</code><br><code>go get github.com/Jeffail/tunny@0.1.3</code></li></ul><h2 id="用本地文件替代"><a href="#用本地文件替代" class="headerlink" title="用本地文件替代"></a>用本地文件替代</h2><ul><li>go.mod 文件追加<br>replace  github.com&#x2F;Jeffail&#x2F;tunny &#x3D;&gt; xxx&#x2F;xxx</li><li>go vender 缓存到本地<br>go mod vendor<br>go build -mod vendor</li></ul><h2 id="创建Go-module"><a href="#创建Go-module" class="headerlink" title="创建Go module"></a>创建Go module</h2><p>创建go.mod即可</p><ul><li>删除本地的go.mod<br><code>go mod init github.com/bing-zhub/xxx</code></li><li>推送至代码仓库</li><li>增加新版本时, 在仓库打新Tag</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>IT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go中的数据结构</title>
    <link href="/2023/09/01/Go%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2023/09/01/Go%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="基本类型的字节数"><a href="#基本类型的字节数" class="headerlink" title="基本类型的字节数"></a>基本类型的字节数</h2><p>可以用Unsafe.Sizeof查看任何变量的字节大小</p><ul><li>int大小跟随系统字长</li><li>指针的大小也是系统字长</li></ul><h2 id="空结构体"><a href="#空结构体" class="headerlink" title="空结构体"></a>空结构体</h2><p>空结构体大小为0<br>但有地址, 但所有的空结构体(独立出现, 没有被其它struct引用)都指向同一地址(zerobase, 0x8a82f8)<br>当被内嵌在其它struct中, 地址不是zerobase<br>空结构体主要是为了节约内存,<br>比如使用map实现hashset </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// value 不占任何空间</span><br>hashSet := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>hashSet[<span class="hljs-string">&quot;a&quot;</span>] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br></code></pre></td></tr></table></figure><p>比如用channel传输信号, 不想携带任何信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串本质上是个结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> stringStruct <span class="hljs-keyword">struct</span> &#123;<br>str unsafe.Pointer<br><span class="hljs-built_in">len</span> <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对string取Sizeof的时候, 取的是指针大小.<br>Data指针指向底层Byte数组<br>len表示byte数组的长度, 编码不同, 字符的个数也不同(UTF8下, 一个字符占三个字节)</p><h3 id="字符编码问题"><a href="#字符编码问题" class="headerlink" title="字符编码问题"></a>字符编码问题</h3><p>所有字符都是用Unicode字符集,使用UTF-8编码</p><ul><li>Unicode字符集<br>一种统一的字符集, 包含了绝多数文字的绝大多数字符, 14w个字符, 至少需要3字节(2^24)才能表示<br>英文字母排在前128个</li><li>UTF-8编码<br>Unicode的一种变长格式<br>128个US-ASCII字符只需一个字节编码<br>西方常用字符需要两个字节<br>其他字符3个字节, 极少4个字节</li></ul><h3 id="字符串遍历"><a href="#字符串遍历" class="headerlink" title="字符串遍历"></a>字符串遍历</h3><p>自动判断多个字节是不是一个字符的不同部分(runtime下的utf8.go实现, rune就是UTF-8编码)<br>字符串被range遍历的时候, 被解码成rune类型的字符</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-string">&quot;中国科学院&quot;</span><br><span class="hljs-comment">// 这样不正确</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(s); i++ &#123;  <br>fmt.Printf(<span class="hljs-string">&quot;%c&quot;</span>, s[i])  <br>&#125;<br><span class="hljs-comment">// 正确方式</span><br><span class="hljs-keyword">for</span> _, c := <span class="hljs-keyword">range</span> s &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%c&quot;</span>, c)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h3><ol><li>转为rune数组</li><li>切片</li><li>转为string<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">s = <span class="hljs-type">string</span>([]<span class="hljs-type">rune</span>(s)[:<span class="hljs-number">3</span>]) <span class="hljs-comment">// 取前三个汉字</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>是一个结构体<br>切片的本质是对数组的引用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> slice <span class="hljs-keyword">struct</span> &#123;<br>  array unsafe.Pointer<br>  <span class="hljs-built_in">len</span> <span class="hljs-type">int</span> <span class="hljs-comment">// 长度</span><br>  <span class="hljs-built_in">cap</span> <span class="hljs-type">int</span> <span class="hljs-comment">// 总容量</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="切片创建"><a href="#切片创建" class="headerlink" title="切片创建"></a>切片创建</h3><ul><li>根据数组创建<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">arr[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br>slice[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure></li><li>字面量创建: 编译时插入创建数组的代码<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">slice := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure></li><li>make: 运行时创建数组<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">slice := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="切片扩容"><a href="#切片扩容" class="headerlink" title="切片扩容"></a>切片扩容</h3><ul><li>不扩容时, 只调整len(编译器负责)</li><li>扩容时, 编译时转为调用runtime.growslice()<br><code>&lt; 1024</code>的时候, 二倍增长, 将原数据复制过来.<br><code>&gt; 1024</code>的时候, 每次增加25%<br>切片扩容时, 并发不安全, 注意切片并发需要加锁</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>字符串与切片都是对底层数组的引用</li><li>字符串有UTF-8变长编码的特点</li><li>切片的容量和长度不同</li><li>切片追加时, 可能需要重新创建底层数组</li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul><li>开放寻址法</li><li>拉链法<br><img src="/img/20230510221809.png" alt="20230510221809.png"><br>Go语言的map使用的是拉链法, 在<code>runtime.hmap</code>中, hmap被定义为<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> hmap <span class="hljs-keyword">struct</span> &#123;<br>count <span class="hljs-type">int</span><br>flags <span class="hljs-type">uint8</span><br>B <span class="hljs-type">uint8</span><br>nooverflow <span class="hljs-type">uint16</span><br>hash0 <span class="hljs-type">uint32</span><br><br>buckets unsafe.Pointer<br>oldbuckets unsafe.Pointer<br>nevacuate <span class="hljs-type">uintptr</span><br>extra *mapextra<br>&#125;<br></code></pre></td></tr></table></figure><img src="/img/20230510222352.png" alt="20230510222352.png"><br><code>2^B</code>个bucket, b map is a bucket for a Go map<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> bmap <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// bucketCntBits = 3</span><br><span class="hljs-comment">// bucketCnt = 1 &lt;&lt; bucketCntBits</span><br>  tophash [bucketCnt]<span class="hljs-type">uint8</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="map的初始化"><a href="#map的初始化" class="headerlink" title="map的初始化"></a>map的初始化</h3><ul><li>make<br><code>m := make(map[string]int, 10)</code><br><img src="/img/20230510223101.png" alt="20230510223101.png"></li><li>字面量<br>元素少于25个时, 转化为简单赋值<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">hash := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span> &#123;<br>  <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">4</span>,<br>  <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-number">6</span>,<br>&#125;<br><span class="hljs-comment">// 转化为</span><br>hash := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">3</span>)<br>hash[<span class="hljs-string">&quot;1&quot;</span>] = <span class="hljs-number">2</span><br>hash[<span class="hljs-string">&quot;3&quot;</span>] = <span class="hljs-number">4</span><br>hash[<span class="hljs-string">&quot;5&quot;</span>] = <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure>元素多于25个时, 转化为循环赋值<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">hash := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span> &#123;<br><span class="hljs-string">&quot;1&quot;</span> : <span class="hljs-number">1</span><br><span class="hljs-string">&quot;2&quot;</span> : <span class="hljs-number">2</span> <br>...<br><span class="hljs-string">&quot;26&quot;</span>: <span class="hljs-number">26</span><br>&#125;<br><span class="hljs-comment">// 转化为</span><br>hash := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">26</span>)<br>vstatk := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, ... , <span class="hljs-string">&quot;26&quot;</span>&#125;<br>vstatv := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, ..., <span class="hljs-number">26</span>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(vstak); i++ &#123;<br>hash[vstatk[i]] = vstatk[i]<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="map的访问"><a href="#map的访问" class="headerlink" title="map的访问"></a>map的访问</h3><ol><li>计算桶号<br><img src="/img/20230510224041.png" alt="20230510224041.png"></li><li>计算tophash<br><img src="/img/20230510223911.png" alt="20230510223911.png"></li><li>匹配<br> <img src="/img/20230510224212.png" alt="20230510224212.png"><br> 从第二个桶中找到tophash等于0x5c的kv, 看k是不是我们想要的, 如果是则返回v.<br> 如果碰撞, 继续线性查找, 如果该bucket也没有, 则去查找溢出桶, 如果都没有则该k不存在.<blockquote><p>写入也类似</p></blockquote></li></ol><h3 id="map扩容"><a href="#map扩容" class="headerlink" title="map扩容"></a>map扩容</h3><p>当hash碰撞过多的时候, 溢出桶数量增加, 会退化成一个链表<br><img src="/img/20230510224803.png" alt="20230510224803.png"><br>map溢出桶太多会导致严重的性能下降<br>runtime.mapassign()可能会触发扩容的情况</p><ol><li>装载因子超过6.5(品骏每个槽6.5个key)</li><li>使用了太多溢出桶(溢出桶超过了普通桶)</li></ol><h4 id="map的扩容类型"><a href="#map的扩容类型" class="headerlink" title="map的扩容类型"></a>map的扩容类型</h4><ul><li>等量扩容<br>数据不多但是溢出桶太多了(整理)</li><li>翻倍扩容<br>数据太多了</li></ul><p>扩容步骤</p><ol><li>创建一组新桶</li><li>oldbuckets指向原有的桶数组</li><li>buckets指向新的桶数组</li><li>map标记为扩容状态</li><li>将所有的数据从旧桶驱逐到新桶</li><li>采用渐进式驱逐</li><li>每次操作一个旧桶时, 将旧桶数据驱逐到新桶</li><li>读取时不进行驱逐, 只判断读取新桶还是旧桶</li><li>所有的旧桶驱逐完成后</li><li>oldbuckets回收</li></ol><h4 id="map的并发"><a href="#map的并发" class="headerlink" title="map的并发"></a>map的并发</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>_ = m[<span class="hljs-number">1</span>]<br>&#125;<br>&#125;()<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>m[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span><br>&#125;<br>&#125;()<br><span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>无法编译<code>fatal error: concurrent map read and map write</code><br>A协程在桶中读数据时, B协程驱逐了这个桶, 那么A协程就会读到错误的数据或者找不到数据<br><img src="/img/20230511203607.png" alt="20230511203607.png"><br>解决方案</p><ul><li>给map加锁(mutex)</li><li>使用sync.Map<br><img src="/img/20230511203912.png" alt="20230511203912.png"><br>追加”d”:D<br><img src="/img/20230511204247.png" alt="20230511204247.png"><br>追加后的读写(misses ++ ), 先去read没有找到d, amended为true, 去dirty查找, 找到对应kv, misses ++<br><img src="/img/20230511204503.png" alt="20230511204503.png"><br>dirty提升, <code>misses = len(dirty)</code>时, dirty提升为read的m, 置回初始状态<br><img src="/img/20230511210918.png" alt="20230511210918.png"><br>删除操作</li><li>正常删除<br><img src="/img/20230511211202.png" alt="20230511211202.png"><br>k置成nil后, GC会自动将v回收</li><li>追加后删除<br><img src="/img/20230511211420.png" alt="20230511211420.png"><br>后面需要提升的话, 要特殊处理<br><img src="/img/20230511211556.png" alt="20230511211556.png"><br>提升后被删key还需要特殊处理<br>不是读写分离, 而是普通读写和追加分离</li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li>Go语言使用拉链实现了hashmap</li><li>每一个桶中存储键哈希的前8位</li><li>桶超出8个数据, 就会存储到溢出桶中</li><li>装载系数或者溢出桶的增加, 会触发map扩容</li><li>扩容可能并不是增加桶数, 而是整理</li><li>map扩容采用渐进式, 桶被操作时才会重新分配</li><li>map才扩容的时候会有并发问题</li><li>sync.Map使用了两个Map, 分离了扩容问题</li><li>不会引发扩容的操作(查 改)使用read map</li><li>会引发扩容的操作(新增)使用dirty map</li><li>读多写多, 追加少的时候性能好</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口显式好还是隐式好?</p><h3 id="Go隐式接口特点"><a href="#Go隐式接口特点" class="headerlink" title="Go隐式接口特点"></a>Go隐式接口特点</h3><ul><li>只要实现了接口的全部方法, 就是自动实现接口</li><li>可以在不修改代码的情况下抽象出新的接口</li></ul><h3 id="接口的底层表示"><a href="#接口的底层表示" class="headerlink" title="接口的底层表示"></a>接口的底层表示</h3><p>底层使用<code>runtime.iface</code>表示</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> iface <span class="hljs-keyword">struct</span>&#123; <br>tab *itab <span class="hljs-comment">// 接口类型, 接口装载的类型, 实现了哪些方法</span><br>data unsafe.Pointer <span class="hljs-comment">// 指向结构体(数据)</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><ul><li>类型断言是一个使用在接口值上的操作</li><li>可以将接口值转换为其它类型值(实现或者兼容接口)</li><li>还可以配合switch 进行类型判断<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> c Car = Truck&#123;&#125;<br>t := c.(Truck)<br></code></pre></td></tr></table></figure>接受者为结构体的时候, 会自动添加一个接受者为指针的方法; 但如果用结构体指针实现了方法, 只会存在指针的.<br><img src="/img/20230511222155.png" alt="20230511222155.png"></li></ul><h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><p>是eface<br>可以承载任何类型.<br>底层不是普通接口</p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ul><li>作为任意类型的函数入参</li><li>函数调用的时候, 会新生成一个空接口, 再传参</li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li>Go的隐式接口更方便系统的扩展和重构</li><li>接口提和指针都可以实现接口</li><li>空接口值可以称在任何类型的数据</li></ul><h2 id="nil-空接口-空结构体"><a href="#nil-空接口-空结构体" class="headerlink" title="nil 空接口 空结构体"></a>nil 空接口 空结构体</h2><h3 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h3><ul><li>nil是空, 但不一定是空指针</li><li>是pointer, channel, func, interface, map, slice其中之一的零值</li><li>每种类型的nil是不同的, 无法比较</li></ul><h3 id="空结构体-1"><a href="#空结构体-1" class="headerlink" title="空结构体"></a>空结构体</h3><ul><li>空结构体是Go中非常特殊的类型</li><li>空结构体的值不是nil</li><li>空结构体的指针也不是nil 但都是相同的(zerobase)</li></ul><h3 id="空接口-1"><a href="#空接口-1" class="headerlink" title="空接口"></a>空接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a <span class="hljs-keyword">interface</span>&#123;&#125; <span class="hljs-comment">// a最初是空的eface</span><br>fmt.Println(a == <span class="hljs-literal">nil</span>) <span class="hljs-comment">// true</span><br><span class="hljs-keyword">var</span> c *<span class="hljs-type">int</span><br>a = c <span class="hljs-comment">// c赋给a之后, 数据为nil, 但类型变为*int, 不是nil</span><br>fmt.Println(c == <span class="hljs-literal">nil</span>) <span class="hljs-comment">// true</span><br>fmt.Println(a == <span class="hljs-literal">nil</span>) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><ul><li>空接口不一定是”nil接口”</li><li>两个属性都是nil才是nil接口</li></ul><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ul><li>nil是多个类型的零值, 或者空值</li><li>空结构体的指针和值都不是nil</li><li>空接口零值是nil, 一旦有了类型信息就不是nil</li></ul><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> S1 <span class="hljs-keyword">struct</span> &#123;<br>num1 <span class="hljs-type">int32</span><br>num2 <span class="hljs-type">int32</span><br>&#125;<br><br><span class="hljs-keyword">type</span> S2 <span class="hljs-keyword">struct</span> &#123;<br>num1 <span class="hljs-type">int16</span><br>num2 <span class="hljs-type">int32</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/20/img/20230520185105.png" alt="非内存对齐"><br><img src="/20/img/20230520185306.png" alt="内存对齐"></p><ul><li>内存对齐: 提高内存操作效率, 有利于内存原子性</li></ul><h3 id="对齐系数"><a href="#对齐系数" class="headerlink" title="对齐系数"></a>对齐系数</h3><p><code>unsafe.Alignof()</code><br>对齐系数: 变量的内存地址必须被对齐系数整除<br>如果对齐系数为4, 变量内存地址必须是4的倍数</p><h3 id="结构体对齐"><a href="#结构体对齐" class="headerlink" title="结构体对齐"></a>结构体对齐</h3><ul><li><p>结构体对齐分为内部对齐和结构体之间对齐</p></li><li><p>内部对齐：考虑成员大小和成员的对齐系数</p><ul><li>指的是结构体内部成员的相对位置（偏移量）</li><li>每个成员的偏移量是自身大小与其对齐系数较小值的倍数</li><li>可以尝试通过调整成员顺序, 节约空间</li><li>结构体的对齐系数为成员最大的对齐系数<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Demo <span class="hljs-keyword">struct</span> &#123;<br>a <span class="hljs-type">bool</span> <span class="hljs-comment">// 大小1, 对齐系数1</span><br>b <span class="hljs-type">string</span> <span class="hljs-comment">// 大小16, 对齐系数8</span><br>c <span class="hljs-type">int16</span> <span class="hljs-comment">// 大小2, 对齐系数2, 必须保持顺序</span><br>&#125;<br></code></pre></td></tr></table></figure><img src="/20/img/20230520185957.png" alt="结构体内部对齐, 顺序严格遵守"></li></ul></li><li><p>结构体长度填充：考虑自身对齐系数和系统字长</p><ul><li>指的是结构体通过增加长度，对齐系统字长</li><li>结构体长度是最大成员长度与系统字长较小的整数倍</li></ul></li></ul><h3 id="空结构体的对齐"><a href="#空结构体的对齐" class="headerlink" title="空结构体的对齐"></a>空结构体的对齐</h3><ul><li>空结构体单独出现时为zerobase</li><li>空结构体出现在<strong>结构体中</strong>时, 地址跟随前一个变量<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Demo <span class="hljs-keyword">struct</span> &#123;<br>a <span class="hljs-type">bool</span><br>z <span class="hljs-keyword">struct</span>&#123;&#125;<br>c <span class="hljs-type">int16</span><br>b <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><img src="/20/img/20230520190857.png" alt="空结构体出现在结构体中"></li><li>空结构体出现在<strong>结构体末尾</strong>时, 需要补齐字长<br><img src="/20/img/20230520191107.png" alt="空结构体出现在结构体末尾"></li></ul><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><ul><li>提高内存操作效率，变量之间需要内存对齐</li><li>基本类型考虑对齐系数</li><li>结构体既需要内部对齐，又需要外部填充对</li><li>齐空结构体作为最后一个成员，需要填充对齐</li></ul><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><h3 id="变量长度"><a href="#变量长度" class="headerlink" title="变量长度"></a>变量长度</h3><ul><li>Go中部分数据的长度与系统字长有关</li><li>空结构体不占用空间</li><li>空结构体与map结合可以实现nashset</li><li>空结构体与channel结合可以当作纯信号</li></ul><h3 id="字符串与切片"><a href="#字符串与切片" class="headerlink" title="字符串与切片"></a>字符串与切片</h3><ul><li>字符串与切片都是对底层数组的引用</li><li>字符串有UTF-8变长编码的特点</li><li>切片的容量和长度不同</li><li>切片追加时可能需要重建底层数组</li></ul><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul><li>Go语言使用拉链实现了hashmap</li><li>每一个桶中存储键哈希的前8位</li><li>桶超出8个数据，就会存储到溢出桶中</li></ul><h3 id="map的扩容"><a href="#map的扩容" class="headerlink" title="map的扩容"></a>map的扩容</h3><ul><li>装载系数或者谥出桶的增加，会触发map扩容</li><li>“扩容”可能并不是增加桶数，而是整理</li><li>map扩容采用<strong>渐进式</strong>，桶被操作时才会重新分配</li></ul><h3 id="sync-Map"><a href="#sync-Map" class="headerlink" title="sync.Map"></a>sync.Map</h3><ul><li>map在扩容时会有并发问题</li><li>sync.Map使用了两个map,分离了扩容问题</li><li>不会引发扩容的操作（查、改）使用read map</li><li>可能引发扩容的操作(新增)，使用dirty map</li></ul><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><ul><li>Go的隐式接口更加方便系统的扩展和重构</li><li>结构体和指针都可以实现接口</li><li>空接口值可以承载任何类型的数据</li></ul><h3 id="nil-空结构体-空接口"><a href="#nil-空结构体-空接口" class="headerlink" title="nil&#x2F;空结构体&#x2F;空接口"></a>nil&#x2F;空结构体&#x2F;空接口</h3><ul><li>nil是多个类型的零值，或者空值</li><li>空结构体的指针和值都不是nil</li><li>空接口零值是nil,一旦有了类型信息就不是nil</li></ul><h3 id="内存对齐-1"><a href="#内存对齐-1" class="headerlink" title="内存对齐"></a>内存对齐</h3><ul><li>提高内存操作效率，变量之间需要内存对齐</li><li>基本类型考虑对齐系数</li><li>结构体既需要内部对齐，又需要外部填充对齐</li><li>空结构体作为最后一个成员，需要填充对齐</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>IT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go是不是面向对象</title>
    <link href="/2023/09/01/Go%E6%98%AF%E4%B8%8D%E6%98%AF%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2023/09/01/Go%E6%98%AF%E4%B8%8D%E6%98%AF%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<ul><li>Go允许OO的编程风格<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age <span class="hljs-type">int</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Person)</span></span> walk() &#123;&#125;<br></code></pre></td></tr></table></figure></li><li>Go的Struct可以看做是其他语言的Class</li><li>Go缺乏其它语言的继承结构</li><li>Go的接口与其它语言有很大差异</li></ul><h2 id="Go的”类”"><a href="#Go的”类”" class="headerlink" title="Go的”类”"></a>Go的”类”</h2><ul><li>其它语言, 往往用class表示一类数据</li><li>class的每一个实例称作”对象”</li><li>Go中用struct表示一类数据</li><li>struct的每一个实例并不是对象, 而是此类型的值</li><li>struct也可以定义方法</li></ul><h2 id="Go的继承"><a href="#Go的继承" class="headerlink" title="Go的继承"></a>Go的继承</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Man <span class="hljs-keyword">struct</span> &#123;<br>Person<br>&#125;<br>m := Man&#123;&#125;<br>m.walk() <span class="hljs-comment">// 语法糖, 实际上是 m.People.walk()</span><br></code></pre></td></tr></table></figure><ul><li>Go没有继承关系</li><li>所谓Go的继承只是组合</li><li>组合中的匿名字段, 通过语法糖达成了类似继承的效果</li></ul><h2 id="Go的接口"><a href="#Go的接口" class="headerlink" title="Go的接口"></a>Go的接口</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> alive <span class="hljs-keyword">interface</span> &#123;<br>walk()<br>&#125;<br><br><span class="hljs-comment">// 实现alive接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(p Person)</span></span> walk() &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>接口可以定义Go中的一组行为相似的struct</li><li>struct并不显式实现接口, 而是隐式实现</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Go没有对象, 没有类, 没有继承</li><li>Go通过组合匿名字段来达到类似继承的效果</li><li>通过以上手段去掉了面向对象中复杂而冗余的部分</li><li>保留了基本的面向对象特性</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>IT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go是如何运行的</title>
    <link href="/2023/09/01/Go%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E7%9A%84/"/>
    <url>/2023/09/01/Go%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>并非是main方法<br>runtime包, <code>_rt0_linux_amd64.s</code>. 汇编程序<br><code>asm_amd64.s</code>, </p><h2 id="读取命令行参数"><a href="#读取命令行参数" class="headerlink" title="读取命令行参数"></a>读取命令行参数</h2><ul><li>复制参数数量argc和参数值argv到栈上</li></ul><h2 id="初始化g0执行栈"><a href="#初始化g0执行栈" class="headerlink" title="初始化g0执行栈"></a>初始化g0执行栈</h2><ul><li>g0是为了调度协程而产生的的协程</li><li>g0是每个Go程序的第一个协程</li></ul><h2 id="运行时检测"><a href="#运行时检测" class="headerlink" title="运行时检测"></a>运行时检测</h2><ul><li>检查各种类型的长度</li><li>检查指针操作</li><li>检查结构体字段的偏移量</li><li>检查atomic原子类型</li><li>检查CAS操作</li><li>检查栈的大小是否为2的幂次</li></ul><h2 id="参数初始化"><a href="#参数初始化" class="headerlink" title="参数初始化"></a>参数初始化</h2><ul><li>对命令行中的参数进行处理</li><li>参数数量赋值给<code>argc int32</code></li><li>参数值赋值给<code>argv **byte</code></li></ul><h2 id="调度器初始化-runtime-schedinit"><a href="#调度器初始化-runtime-schedinit" class="headerlink" title="调度器初始化 runtime.schedinit"></a>调度器初始化 runtime.schedinit</h2><ul><li>全局栈空间内存分配</li><li>加载命令行参数到os.Args</li><li>堆内存空间初始化</li><li>加载操作系统环境变量</li><li>初始化当前系统线程</li><li>垃圾回收器的参数初始化</li><li>算法初始化(map&#x2F;hash)</li><li>设置process数量</li></ul><h2 id="创建主协程"><a href="#创建主协程" class="headerlink" title="创建主协程"></a>创建主协程</h2><ul><li>创建一个新的协程, 执行runtime.main(此前已经有一个g0协程)</li><li>放入调度器等待调度</li></ul><h2 id="初始化M"><a href="#初始化M" class="headerlink" title="初始化M"></a>初始化M</h2><ul><li>初始化一个M, 用来调度主协程</li></ul><h2 id="主协程执行主函数"><a href="#主协程执行主函数" class="headerlink" title="主协程执行主函数"></a>主协程执行主函数</h2><ul><li>执行runtime包中的init方法</li><li>启动GC垃圾收集器</li><li>执行用户包依赖的init方法</li><li>执行用户主函数main.main()</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Go启动时经历了检查, 各种初始化, 初始化协程调度的过程<br>main.main()也是在协程中运行的<br>Go程序的启动过程像一个虚拟机, 或框架.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>IT</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
